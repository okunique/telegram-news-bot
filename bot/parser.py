import logging
import asyncio
from datetime import datetime, timedelta
from telethon import TelegramClient, events
from telethon.tl.types import PeerChannel, MessageMediaPhoto, MessageMediaDocument
from .config import settings
from .database import async_session
from .models import News
from .openrouter_client import analyze_news_full, translate_news

logger = logging.getLogger(__name__)

class NewsParser:
    def __init__(self):
        self.client = TelegramClient(
            "news_parser_session",
            settings.api_id,
            settings.TELEGRAM_API_HASH
        )
        self.source_channels = settings.SOURCE_CHANNEL_IDS
        self.target_channel = settings.TARGET_CHANNEL_ID
        self.last_check = datetime.utcnow() - timedelta(hours=1)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            await self.client.start()
            logger.info("–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.client.on(events.NewMessage(chats=self.source_channels))
            async def handle_new_message(event):
                await self.process_message(event.message)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            await self.client.run_until_disconnected()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            raise
    
    async def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å—Ç–∞—Ä—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if message.date < self.last_check:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = message.text or message.caption or ""
            if not text:
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç—å
            analysis = await analyze_news_full(text)
            if not analysis:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
                return
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–æ–≤–æ—Å—Ç—å
            translated = await translate_news(text)
            if not translated:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç—å")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –±–∞–∑—É
            async with async_session() as session:
                news = News(
                    source_channel_id=str(message.chat_id),
                    message_id=message.id,
                    original_text=text,
                    translated_text=translated,
                    topic=analysis["topic"],
                    confidence=analysis["confidence"],
                    importance=analysis["importance"],
                    is_catalyst=analysis["is_catalyst"],
                    market_target=analysis["market_target"],
                    timestamp=message.date
                )
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                if message.media:
                    if isinstance(message.media, MessageMediaPhoto):
                        news.media_path = "photo"
                    elif isinstance(message.media, MessageMediaDocument):
                        news.media_path = "document"
                
                session.add(news)
                await session.commit()
                
                # –ü—É–±–ª–∏–∫—É–µ–º –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
                if translated:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    await self.client.send_message(
                        self.target_channel,
                        f"üì∞ {translated}\n\n"
                        f"–¢–µ–º–∞: {analysis['topic']}\n"
                        f"–í–∞–∂–Ω–æ—Å—Ç—å: {analysis['importance']}/5\n"
                        f"–ö–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä: {'–î–∞' if analysis['is_catalyst'] else '–ù–µ—Ç'}"
                    )
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                    if message.media:
                        await self.client.send_file(
                            self.target_channel,
                            message.media,
                            caption=f"üì∞ {translated}"
                        )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def fetch_history(self, hours: int = 1):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤"""
        try:
            time_ago = datetime.utcnow() - timedelta(hours=hours)
            
            for channel in self.source_channels:
                async for message in self.client.iter_messages(
                    channel,
                    offset_date=time_ago,
                    reverse=True
                ):
                    await self.process_message(message)
            
            self.last_check = datetime.utcnow()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            await self.client.disconnect()
            logger.info("–ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä—Å–µ—Ä–∞: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
parser = NewsParser()

async def start_parser():
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        await parser.fetch_history(hours=1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        await parser.start()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        raise 