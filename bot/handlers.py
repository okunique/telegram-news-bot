import logging
import structlog
from datetime import datetime, timedelta
from typing import Optional
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy import select, func
from .database import async_session
from .models import News, DigestLog
from .media_handler import MediaHandler
from .openrouter_client import OpenRouterClient

logger = structlog.get_logger()

class NewsHandler:
    def __init__(self, bot):
        self.bot = bot
        self.router = Router()
        self.media_handler = MediaHandler()
        self.openrouter = OpenRouterClient()
        self.setup_handlers()
    
    def setup_handlers(self):
        self.router.message.register(self.handle_message, F.text)
        self.router.message.register(self.handle_media, F.photo)
        self.router.message.register(self.handle_media_group, F.media_group_id)
        self.router.message.register(self.digest, Command("digest"))
        self.router.message.register(self.status, Command("status"))
    
    async def handle_message(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            async with async_session() as session:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å
                news = News(
                    source_channel_id=message.chat.id,
                    message_id=message.message_id,
                    text=message.text,
                    timestamp=datetime.utcnow()
                )
                session.add(news)
                await session.commit()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                analysis = await self.openrouter.analyze_text(message.text)
                if analysis:
                    news.topic = analysis.get("topic")
                    news.confidence_level = analysis.get("confidence_level")
                    await session.commit()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
                    await message.reply(
                        f"üìä –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–∏:\n"
                        f"–¢–µ–º–∞: {news.topic}\n"
                        f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {news.confidence_level}%"
                    )
                
        except Exception as e:
            logger.error("Error handling message", error=str(e))
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def handle_media(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
            media_path = await self.media_handler.handle_media(message)
            if not media_path:
                return
            
            async with async_session() as session:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å
                news = News(
                    source_channel_id=message.chat.id,
                    message_id=message.message_id,
                    text=message.caption or "",
                    media_path=media_path,
                    timestamp=datetime.utcnow()
                )
                session.add(news)
                await session.commit()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                if message.caption:
                    analysis = await self.openrouter.analyze_text(message.caption)
                    if analysis:
                        news.topic = analysis.get("topic")
                        news.confidence_level = analysis.get("confidence_level")
                        await session.commit()
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
                        await message.reply(
                            f"üìä –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–∏:\n"
                            f"–¢–µ–º–∞: {news.topic}\n"
                            f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {news.confidence_level}%"
                        )
                
        except Exception as e:
            logger.error("Error handling media", error=str(e))
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞")
    
    async def handle_media_group(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã
            media_group = await self.bot.get_media_group(
                message.chat.id,
                message.message_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
            media_paths = await self.media_handler.handle_media_group(media_group)
            if not media_paths:
                return
            
            async with async_session() as session:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å
                news = News(
                    source_channel_id=message.chat.id,
                    message_id=message.message_id,
                    text=message.caption or "",
                    media_path=",".join(media_paths),
                    timestamp=datetime.utcnow()
                )
                session.add(news)
                await session.commit()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                if message.caption:
                    analysis = await self.openrouter.analyze_text(message.caption)
                    if analysis:
                        news.topic = analysis.get("topic")
                        news.confidence_level = analysis.get("confidence_level")
                        await session.commit()
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
                        await message.reply(
                            f"üìä –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–∏:\n"
                            f"–¢–µ–º–∞: {news.topic}\n"
                            f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {news.confidence_level}%"
                        )
                
        except Exception as e:
            logger.error("Error handling media group", error=str(e))
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤")
    
    async def digest(self, message: Message):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            period = message.text.split()[1] if len(message.text.split()) > 1 else "day"
            if period not in ["hour", "day", "week"]:
                await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: hour, day, week")
                return
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
            now = datetime.utcnow()
            if period == "hour":
                time_ago = now - timedelta(hours=1)
            elif period == "day":
                time_ago = now - timedelta(days=1)
            else:  # week
                time_ago = now - timedelta(weeks=1)
            
            async with async_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
                stmt = select(News).where(News.timestamp >= time_ago)
                result = await session.execute(stmt)
                news_list = result.scalars().all()
                
                if not news_list:
                    await message.reply("üì≠ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                    return
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–∞–º
                topics = {}
                for news in news_list:
                    if news.topic:
                        if news.topic not in topics:
                            topics[news.topic] = []
                        topics[news.topic].append(news)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
                digest_text = f"üì∞ –î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {period}:\n\n"
                for topic, news in topics.items():
                    digest_text += f"üìå {topic}:\n"
                    for n in news:
                        digest_text += f"- {n.text[:100]}...\n"
                    digest_text += "\n"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –¥–∞–π–¥–∂–µ—Å—Ç–∞
                log = DigestLog(
                    period=period,
                    news_count=len(news_list),
                    topics_count=len(topics),
                    generated_at=now
                )
                session.add(log)
                await session.commit()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
                await message.reply(digest_text)
                
        except Exception as e:
            logger.error("Error generating digest", error=str(e))
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
    
    async def status(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            async with async_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_news = await session.execute(select(func.count(News.id)))
                total_news = total_news.scalar()
                
                total_digests = await session.execute(select(func.count(DigestLog.id)))
                total_digests = total_digests.scalar()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                status_text = (
                    "ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
                    f"üìä –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}\n"
                    f"üìà –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {total_digests}\n"
                    f"‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC"
                )
                
                await message.reply(status_text)
                
        except Exception as e:
            logger.error("Error getting status", error=str(e))
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞") 