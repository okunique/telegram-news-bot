from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
import structlog
from typing import Optional
from .config import settings
from .openrouter_client import OpenRouterClient
from .media_handler import MediaHandler
from .models import News, DigestLog
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime, timedelta

logger = structlog.get_logger()

class BotHandlers:
    def __init__(self, session: AsyncSession):
        self.session = session
        self.openrouter = OpenRouterClient()
        self.media_handler = MediaHandler()
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π. "
            "–Ø –±—É–¥—É —Å–æ–±–∏—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, "
            "–ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∏—Ö –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã."
        )
    
    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            async with self.session.begin():
                news_count = await self.session.query(News).count()
                digest_count = await self.session.query(DigestLog).count()
            
            status_text = (
                "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
                f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: –∞–∫—Ç–∏–≤–Ω–æ\n"
                f"‚úÖ OpenRouter API: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ\n"
                f"üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {news_count}\n"
                f"üìä –°–æ–∑–¥–∞–Ω–æ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {digest_count}\n"
            )
            
            await update.message.reply_text(status_text)
            
        except Exception as e:
            logger.error("Error in status command", error=str(e))
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    
    async def digest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /digest"""
        try:
            period = context.args[0] if context.args else "24h"
            if period not in settings.DIGEST_PERIODS:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 1h –∏–ª–∏ 24h"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            time_ago = datetime.utcnow() - timedelta(
                hours=1 if period == "1h" else 24
            )
            
            async with self.session.begin():
                news = await self.session.query(News).filter(
                    News.timestamp >= time_ago
                ).all()
            
            if not news:
                await update.message.reply_text(
                    f"üì≠ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period}"
                )
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            digest_text = await self._generate_digest(news, period)
            await update.message.reply_text(digest_text)
            
        except Exception as e:
            logger.error("Error in digest command", error=str(e))
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
    
    async def _generate_digest(self, news: list, period: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenRouter API
        return "–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not update.message:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            if str(update.message.chat.id) not in settings.SOURCE_CHANNEL_IDS:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –º–µ–¥–∏–∞
            text = update.message.text or update.message.caption or ""
            media_url = await self.media_handler.handle_media(update, context)
            
            if not text and not media_url:
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            analysis = await self.openrouter.analyze_text(text)
            if not analysis:
                logger.error("Failed to analyze text")
                return
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
            translated = await self.openrouter.translate_text(text)
            if not translated:
                logger.error("Failed to translate text")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            news = News(
                source_channel_id=str(update.message.chat.id),
                message_id=update.message.message_id,
                text_original=text,
                text_translated=translated,
                media_url=media_url,
                **analysis
            )
            
            async with self.session.begin():
                self.session.add(news)
                await self.session.commit()
            
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
            await context.bot.send_message(
                chat_id=settings.TARGET_CHANNEL_ID,
                text=f"{translated}\n\n"
                     f"üìä –í–∞–∂–Ω–æ—Å—Ç—å: {news.importance_weight}/5\n"
                     f"üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {news.market_target.value}\n"
                     f"üè∑ –¢–µ–º–∞: {news.topic}"
            )
            
            if media_url:
                await context.bot.send_photo(
                    chat_id=settings.TARGET_CHANNEL_ID,
                    photo=media_url
                )
            
        except Exception as e:
            logger.error("Error handling message", error=str(e)) 