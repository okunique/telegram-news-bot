import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy import select, func
from .database import async_session
from .models import News, DigestLog
from .openrouter_client import analyze_news

logger = logging.getLogger(__name__)

def register_handlers(dp: Router):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    dp.message.register(cmd_start, Command(commands=["start"]))
    dp.message.register(cmd_help, Command(commands=["help"]))
    dp.message.register(cmd_status, Command(commands=["status"]))
    dp.message.register(cmd_digest, Command(commands=["digest"]))
    dp.message.register(handle_message, F.text)
    dp.message.register(handle_photo, F.photo)

async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/digest - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π"
    )

async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞\n"
        "/digest [–ø–µ—Ä–∏–æ–¥] - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "  –ü–µ—Ä–∏–æ–¥—ã: hour, day, week\n"
        "  –ü—Ä–∏–º–µ—Ä: /digest day"
    )

async def cmd_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_news = await session.execute(select(func.count(News.id)))
            total_news = total_news.scalar()
            
            total_digests = await session.execute(select(func.count(DigestLog.id)))
            total_digests = total_digests.scalar()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            status_text = (
                "ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
                f"üìä –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}\n"
                f"üìà –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {total_digests}\n"
                f"‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC"
            )
            
            await message.answer(status_text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

async def cmd_digest(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /digest"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        period = args[1] if len(args) > 1 else "day"
        
        if period not in ["hour", "day", "week"]:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: hour, day, week"
            )
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        now = datetime.utcnow()
        if period == "hour":
            time_ago = now - timedelta(hours=1)
        elif period == "day":
            time_ago = now - timedelta(days=1)
        else:  # week
            time_ago = now - timedelta(weeks=1)
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
            stmt = select(News).where(News.timestamp >= time_ago)
            result = await session.execute(stmt)
            news_list = result.scalars().all()
            
            if not news_list:
                await message.answer("üì≠ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–∞–º
            topics = {}
            for news in news_list:
                if news.topic:
                    if news.topic not in topics:
                        topics[news.topic] = []
                    topics[news.topic].append(news)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            digest_text = f"üì∞ –î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {period}:\n\n"
            for topic, news in topics.items():
                digest_text += f"üìå {topic}:\n"
                for n in news:
                    digest_text += f"- {n.text[:100]}...\n"
                digest_text += "\n"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            log = DigestLog(
                period=period,
                news_count=len(news_list),
                topics_count=len(topics),
                generated_at=now
            )
            session.add(log)
            await session.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            await message.answer(digest_text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")

async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–Ω–∞–ª–∏–∑–æ–º"""
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç—å
        topic, confidence = await analyze_news(message.text)
        async with async_session() as session:
            news = News(
                source_channel_id=message.chat.id,
                message_id=message.message_id,
                text=message.text,
                topic=topic,
                confidence=confidence,
                timestamp=datetime.utcnow()
            )
            session.add(news)
            await session.commit()
        await message.reply(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n–¢–µ–º–∞: {topic}\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def handle_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∞–Ω–∞–ª–∏–∑–æ–º caption"""
    try:
        caption = message.caption or ""
        topic, confidence = await analyze_news(caption) if caption else (None, None)
        async with async_session() as session:
            news = News(
                source_channel_id=message.chat.id,
                message_id=message.message_id,
                text=caption,
                topic=topic,
                confidence=confidence,
                media_path=message.photo[-1].file_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –∫–∞–∫ –ø—É—Ç—å
                timestamp=datetime.utcnow()
            )
            session.add(news)
            await session.commit()
        await message.reply(f"‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n–¢–µ–º–∞: {topic}\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ") 