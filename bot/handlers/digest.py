from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession

from ..database import async_session
from ..models import News, DigestLog
from ..config import settings

router = Router()

@router.message(Command("digest"))
async def cmd_digest(message: Message):
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π"""
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        yesterday = datetime.utcnow() - timedelta(days=1)
        news = await session.scalars(
            select(News)
            .where(News.timestamp >= yesterday)
            .order_by(News.timestamp.desc())
        )
        
        if not news:
            await message.answer("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–∞–º
        topics = {}
        for item in news:
            if item.topic:
                if item.topic not in topics:
                    topics[item.topic] = []
                topics[item.topic].append(item)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
        digest = "üì∞ –î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ 24 —á–∞—Å–∞:\n\n"
        
        for topic, items in topics.items():
            digest += f"üìå {topic}:\n"
            for item in items[:3]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ
                digest += f"‚Ä¢ {item.text[:100]}...\n"
            digest += "\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        log = DigestLog(
            period="24h",
            news_count=len(news),
            topics_count=len(topics)
        )
        session.add(log)
        await session.commit()
        
        await message.answer(digest) 